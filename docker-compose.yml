version: '3.8'

services:
  db:
    image: postgres:15
    container_name: service_manager_db
    environment:
      POSTGRES_DB: computer_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qweasdzxc123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - service_manager_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    container_name: service_manager_web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn service_manager.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=computer_service
      - DB_USER=postgres
      - DB_PASSWORD=qweasdzxc123
      - DB_HOST=db
      - DB_PORT=5432
      - SECRET_KEY=django-insecure-=g$2l%5930v!$lsj5dct_a2o5h0za6-@q$i7t(4-m1_c5gsa2h
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - STATIC_URL=/static/
      - STATIC_ROOT=staticfiles
      - LOG_LEVEL=INFO
      - LOG_FILE=debug.log
    depends_on:
      db:
        condition: service_healthy
    networks:
      - service_manager_network

  nginx:
    image: nginx:alpine
    container_name: service_manager_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - service_manager_network

volumes:
  postgres_data:
  static_volume:

networks:
  service_manager_network:
    driver: bridge 